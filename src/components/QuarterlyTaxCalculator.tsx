'use client';

import { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar, DollarSign, AlertCircle, Download, CheckCircle2 } from 'lucide-react';
import { calculateTaxes, getQuarterlyDeadlines, projectAnnualTax } from '@/lib/tax-calculator';

interface QuarterlyTaxCalculatorProps {
  yearToDateIncome?: number;
  yearToDateExpenses?: number;
}

export default function QuarterlyTaxCalculator({
  yearToDateIncome = 0,
  yearToDateExpenses = 0,
}: QuarterlyTaxCalculatorProps) {
  const [income, setIncome] = useState(Math.round(yearToDateIncome * 100) / 100);
  const [expenses, setExpenses] = useState(Math.round(yearToDateExpenses * 100) / 100);
  const [maritalStatus, setMaritalStatus] = useState<'single' | 'married'>('single');
  const [dependents, setDependents] = useState(0);

  // Calculate current quarter
  const currentQuarter = useMemo(() => {
    const month = new Date().getMonth() + 1;
    if (month <= 3) return 1;
    if (month <= 6) return 2;
    if (month <= 9) return 3;
    return 4;
  }, []);

  // Calculate taxes
  const taxCalc = useMemo(() => {
    return calculateTaxes(income, expenses);
  }, [income, expenses]);

  // Get quarterly deadlines
  const deadlines = useMemo(() => {
    const year = new Date().getFullYear();
    return [
      { date: new Date(year, 3, 15) }, // April 15
      { date: new Date(year, 5, 15) }, // June 15
      { date: new Date(year, 8, 15) }, // September 15
      { date: new Date(year + 1, 0, 15) }, // January 15 next year
    ];
  }, []);

  // Project annual tax based on current quarter
  const annualProjection = useMemo(() => {
    // Simple projection: multiply by quarters remaining in year
    const quarterMultiplier = 4 / currentQuarter;
    const projectedAnnualIncome = income * quarterMultiplier;
    const projectedAnnualExpenses = expenses * quarterMultiplier;
    const projectedTax = calculateTaxes(projectedAnnualIncome, projectedAnnualExpenses);

    return {
      projectedAnnualIncome: Math.round(projectedAnnualIncome),
      projectedAnnualTax: Math.round(projectedTax.totalTaxLiability),
    };
  }, [income, expenses, currentQuarter]);

  // Calculate payment status for each quarter
  const quarterPayments = useMemo(() => {
    const quarterlyAmount = taxCalc.quarterlyPayment;
    const monthsPassed = new Date().getMonth() + 1;

    return deadlines.map((deadline, index) => {
      const quarter = index + 1;
      const isPast = new Date() > deadline.date;
      const isCurrent = quarter === currentQuarter;
      const amount = quarterlyAmount;

      return {
        quarter,
        deadline: deadline.date,
        amount,
        isPast,
        isCurrent,
        status: isPast ? 'due' : isCurrent ? 'upcoming' : 'future',
      };
    });
  }, [taxCalc.quarterlyPayment, currentQuarter, deadlines]);

  const handleDownloadReport = () => {
    const report = `
QUARTERLY TAX ESTIMATE REPORT
Generated: ${new Date().toLocaleDateString()}

===========================================
INCOME SUMMARY
===========================================
Gross Income (YTD): $${income.toLocaleString()}
Business Expenses: -$${expenses.toLocaleString()}
Net Income: $${(income - expenses).toLocaleString()}

===========================================
TAX BREAKDOWN
===========================================
Self-Employment Tax (15.3%): $${taxCalc.selfEmploymentTax.toLocaleString()}
Federal Income Tax: $${taxCalc.federalIncomeTax.toLocaleString()}
State Income Tax (est.): $${taxCalc.stateTax.toLocaleString()}

Total Tax Liability: $${taxCalc.totalTaxLiability.toLocaleString()}
Effective Tax Rate: ${(taxCalc.effectiveTaxRate * 100).toFixed(1)}%

===========================================
QUARTERLY PAYMENTS
===========================================
Recommended Quarterly Payment: $${taxCalc.quarterlyPayment.toLocaleString()}

${quarterPayments.map((q) => `
Q${q.quarter} - Due ${q.deadline.toLocaleDateString()}
Amount: $${q.amount.toLocaleString()}
Status: ${q.status.toUpperCase()}
`).join('\n')}

===========================================
ANNUAL PROJECTION
===========================================
Projected Annual Income: $${annualProjection.projectedAnnualIncome.toLocaleString()}
Projected Annual Tax: $${annualProjection.projectedAnnualTax.toLocaleString()}

Based on ${currentQuarter} quarter(s) of data.

===========================================
NOTES
===========================================
- Make payments at IRS.gov/payments or irs.gov/directpay
- Keep receipts for all business expenses
- Consider working with a tax professional
- This is an estimate only - not official tax advice

Generated by Portable - Financial Platform for Gig Workers
    `.trim();

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Quarterly-Tax-Estimate-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-4">
      {/* Calculator Inputs */}
      <Card className="bg-slate-900/50 border-white/10">
        <CardHeader className="pb-3">
          <CardTitle className="text-white text-base">Tax Calculator</CardTitle>
          <CardDescription className="text-xs">
            Enter your year-to-date income and expenses
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          <div className="grid md:grid-cols-2 gap-3">
            <div className="space-y-1.5">
              <Label htmlFor="income" className="text-slate-300 text-xs">
                Year-to-Date Income
              </Label>
              <div className="relative">
                <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                  id="income"
                  type="number"
                  value={income}
                  onChange={(e) => setIncome(Number(e.target.value))}
                  className="pl-10 bg-slate-800 border-white/10 text-white h-9"
                  placeholder="50000"
                />
              </div>
            </div>

            <div className="space-y-1.5">
              <Label htmlFor="expenses" className="text-slate-300 text-xs">
                Year-to-Date Expenses
              </Label>
              <div className="relative">
                <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                  id="expenses"
                  type="number"
                  value={expenses}
                  onChange={(e) => setExpenses(Number(e.target.value))}
                  className="pl-10 bg-slate-800 border-white/10 text-white h-9"
                  placeholder="10000"
                />
              </div>
            </div>
          </div>

          <div className="pt-2 border-t border-white/10">
            <p className="text-xs text-slate-400">
              Net Income: <span className="text-white font-semibold">${(income - expenses).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Tax Breakdown & Annual Projection - Side by Side */}
      <div className="grid md:grid-cols-2 gap-4">
        <Card className="bg-gradient-to-br from-red-500/10 to-orange-500/10 border-red-500/20">
          <CardHeader className="pb-3">
            <CardTitle className="text-white text-base">Estimated Tax Liability</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="text-center p-3 bg-slate-900/50 rounded-lg">
              <div className="text-3xl font-black text-white">
                ${taxCalc.totalTaxLiability.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </div>
              <div className="text-xs text-slate-400 mt-1">Total Tax</div>
            </div>

            <div className="space-y-1.5 text-xs">
              <div className="flex justify-between items-center p-2 bg-slate-900/30 rounded">
                <span className="text-slate-300">Self-Employment</span>
                <span className="text-white font-semibold">${taxCalc.selfEmploymentTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
              </div>
              <div className="flex justify-between items-center p-2 bg-slate-900/30 rounded">
                <span className="text-slate-300">Federal Income</span>
                <span className="text-white font-semibold">${taxCalc.federalIncomeTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
              </div>
              <div className="flex justify-between items-center p-2 bg-slate-900/30 rounded">
                <span className="text-slate-300">State Tax</span>
                <span className="text-white font-semibold">${taxCalc.stateTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-500/10 to-pink-500/10 border-purple-500/20">
          <CardHeader className="pb-3">
            <CardTitle className="text-white text-base">Annual Projection</CardTitle>
            <CardDescription className="text-xs">Based on Q{currentQuarter} performance</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="p-3 bg-slate-900/30 rounded-lg">
              <div className="text-xs text-slate-400 mb-1">Projected Income</div>
              <div className="text-2xl font-bold text-white">
                ${annualProjection.projectedAnnualIncome.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </div>
            </div>
            <div className="p-3 bg-slate-900/30 rounded-lg">
              <div className="text-xs text-slate-400 mb-1">Projected Tax</div>
              <div className="text-2xl font-bold text-white">
                ${annualProjection.projectedAnnualTax.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </div>
            </div>
            <p className="text-xs text-slate-400">
              * Assumes Q{currentQuarter} earnings rate continues
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Quarterly Payment Schedule */}
      <Card className="bg-slate-900/50 border-white/10">
        <CardHeader className="pb-3">
          <CardTitle className="text-white flex items-center gap-2 text-base">
            <Calendar className="w-4 h-4 text-blue-400" />
            Quarterly Payment Schedule
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {quarterPayments.map((quarter) => {
              const statusColors: Record<'due' | 'upcoming' | 'future', string> = {
                due: 'border-red-500/30 bg-red-500/10',
                upcoming: 'border-blue-500/30 bg-blue-500/10',
                future: 'border-slate-500/30 bg-slate-900/30',
              };

              const statusIcons: Record<'due' | 'upcoming' | 'future', React.ReactNode> = {
                due: <AlertCircle className="w-4 h-4 text-red-400" />,
                upcoming: <Calendar className="w-4 h-4 text-blue-400" />,
                future: <CheckCircle2 className="w-4 h-4 text-slate-500" />,
              };

              return (
                <div
                  key={quarter.quarter}
                  className={`p-3 rounded-lg border ${statusColors[quarter.status as 'due' | 'upcoming' | 'future']}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      {statusIcons[quarter.status as 'due' | 'upcoming' | 'future']}
                      <div>
                        <div className="text-white font-semibold text-sm">
                          Q{quarter.quarter} {new Date().getFullYear()}
                        </div>
                        <div className="text-xs text-slate-400">
                          Due: {quarter.deadline.toLocaleDateString('en-US', {
                            month: 'short',
                            day: 'numeric',
                          })}
                        </div>
                      </div>
                    </div>

                    <div className="text-right">
                      <div className="text-lg font-bold text-white">
                        ${quarter.amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          <div className="mt-4 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <p className="text-xs text-blue-300 mb-1.5 font-semibold">💡 Payment Instructions</p>
            <ul className="text-xs text-slate-300 space-y-0.5">
              <li>• Pay at <a href="https://www.irs.gov/payments" target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">IRS.gov/payments</a></li>
              <li>• Use Form 1040-ES for vouchers</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      {/* Download & Disclaimer */}
      <div className="space-y-3">
        <Button
          onClick={handleDownloadReport}
          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:opacity-90"
        >
          <Download className="w-4 h-4 mr-2" />
          Download Tax Report
        </Button>

        <Card className="bg-yellow-500/10 border-yellow-500/30">
          <CardContent className="p-3">
            <p className="text-xs text-yellow-300 flex items-start gap-2">
              <AlertCircle className="w-3 h-3 flex-shrink-0 mt-0.5" />
              <span>
                <strong>Disclaimer:</strong> Estimates only. Consult a tax professional for accurate planning.
              </span>
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
