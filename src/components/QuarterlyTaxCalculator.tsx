'use client';

import { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar, DollarSign, AlertCircle, Download, CheckCircle2 } from 'lucide-react';
import { calculateTaxes, getQuarterlyDeadlines, projectAnnualTax } from '@/lib/tax-calculator';

interface QuarterlyTaxCalculatorProps {
  yearToDateIncome?: number;
  yearToDateExpenses?: number;
}

export default function QuarterlyTaxCalculator({
  yearToDateIncome = 0,
  yearToDateExpenses = 0,
}: QuarterlyTaxCalculatorProps) {
  const [income, setIncome] = useState(yearToDateIncome);
  const [expenses, setExpenses] = useState(yearToDateExpenses);
  const [maritalStatus, setMaritalStatus] = useState<'single' | 'married'>('single');
  const [dependents, setDependents] = useState(0);

  // Calculate current quarter
  const currentQuarter = useMemo(() => {
    const month = new Date().getMonth() + 1;
    if (month <= 3) return 1;
    if (month <= 6) return 2;
    if (month <= 9) return 3;
    return 4;
  }, []);

  // Calculate taxes
  const taxCalc = useMemo(() => {
    const netIncome = income - expenses;
    return calculateTaxes(netIncome);
  }, [income, expenses]);

  // Get quarterly deadlines
  const deadlines = useMemo(() => {
    return getQuarterlyDeadlines(new Date().getFullYear());
  }, []);

  // Project annual tax based on current quarter
  const annualProjection = useMemo(() => {
    const netIncome = income - expenses;
    return projectAnnualTax(netIncome, currentQuarter);
  }, [income, expenses, currentQuarter]);

  // Calculate payment status for each quarter
  const quarterPayments = useMemo(() => {
    const quarterlyAmount = taxCalc.quarterly / 4;
    const monthsPassed = new Date().getMonth() + 1;

    return deadlines.map((deadline, index) => {
      const quarter = index + 1;
      const isPast = new Date() > deadline.date;
      const isCurrent = quarter === currentQuarter;
      const amount = quarterlyAmount;

      return {
        quarter,
        deadline: deadline.date,
        amount,
        isPast,
        isCurrent,
        status: isPast ? 'due' : isCurrent ? 'upcoming' : 'future',
      };
    });
  }, [taxCalc.quarterly, currentQuarter, deadlines]);

  const handleDownloadReport = () => {
    const report = `
QUARTERLY TAX ESTIMATE REPORT
Generated: ${new Date().toLocaleDateString()}

===========================================
INCOME SUMMARY
===========================================
Gross Income (YTD): $${income.toLocaleString()}
Business Expenses: -$${expenses.toLocaleString()}
Net Income: $${(income - expenses).toLocaleString()}

===========================================
TAX BREAKDOWN
===========================================
Self-Employment Tax (15.3%): $${taxCalc.selfEmploymentTax.toLocaleString()}
Federal Income Tax: $${taxCalc.federalIncomeTax.toLocaleString()}
State Income Tax (est.): $${taxCalc.stateTax.toLocaleString()}

Total Tax Liability: $${taxCalc.totalTax.toLocaleString()}
Effective Tax Rate: ${taxCalc.effectiveRate}%

===========================================
QUARTERLY PAYMENTS
===========================================
Recommended Quarterly Payment: $${(taxCalc.quarterly / 4).toLocaleString()}

${quarterPayments.map((q) => `
Q${q.quarter} - Due ${q.deadline.toLocaleDateString()}
Amount: $${q.amount.toLocaleString()}
Status: ${q.status.toUpperCase()}
`).join('\n')}

===========================================
ANNUAL PROJECTION
===========================================
Projected Annual Income: $${annualProjection.projectedAnnualIncome.toLocaleString()}
Projected Annual Tax: $${annualProjection.projectedAnnualTax.toLocaleString()}

Based on ${currentQuarter} quarter(s) of data.

===========================================
NOTES
===========================================
- Make payments at IRS.gov/payments or irs.gov/directpay
- Keep receipts for all business expenses
- Consider working with a tax professional
- This is an estimate only - not official tax advice

Generated by Portable - Financial Platform for Gig Workers
    `.trim();

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Quarterly-Tax-Estimate-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* Calculator Inputs */}
      <Card className="bg-slate-900/50 border-white/10">
        <CardHeader>
          <CardTitle className="text-white">Tax Calculator</CardTitle>
          <CardDescription className="text-slate-400">
            Enter your year-to-date income and expenses to calculate quarterly tax estimates
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="income" className="text-slate-300">
                Year-to-Date Income
              </Label>
              <div className="relative">
                <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                  id="income"
                  type="number"
                  value={income}
                  onChange={(e) => setIncome(Number(e.target.value))}
                  className="pl-10 bg-slate-800 border-white/10 text-white"
                  placeholder="50000"
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="expenses" className="text-slate-300">
                Year-to-Date Expenses
              </Label>
              <div className="relative">
                <DollarSign className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                  id="expenses"
                  type="number"
                  value={expenses}
                  onChange={(e) => setExpenses(Number(e.target.value))}
                  className="pl-10 bg-slate-800 border-white/10 text-white"
                  placeholder="10000"
                />
              </div>
            </div>
          </div>

          <div className="pt-4 border-t border-white/10">
            <p className="text-sm text-slate-400">
              Net Income: <span className="text-white font-semibold">${(income - expenses).toLocaleString()}</span>
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Tax Breakdown */}
      <Card className="bg-gradient-to-br from-red-500/10 to-orange-500/10 border-red-500/20">
        <CardHeader>
          <CardTitle className="text-white">Estimated Tax Liability</CardTitle>
          <CardDescription className="text-slate-400">
            Your total estimated tax for the year
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Total Tax */}
            <div className="text-center p-6 bg-slate-900/50 rounded-lg">
              <div className="text-5xl font-black text-white mb-2">
                ${taxCalc.totalTax.toLocaleString()}
              </div>
              <div className="text-sm text-slate-400">Total Estimated Tax</div>
              <div className="text-xs text-slate-500 mt-1">
                Effective rate: {taxCalc.effectiveRate}%
              </div>
            </div>

            {/* Breakdown */}
            <div className="grid gap-3">
              <div className="flex justify-between items-center p-3 bg-slate-900/30 rounded-lg">
                <span className="text-slate-300">Self-Employment Tax (15.3%)</span>
                <span className="text-white font-bold">${taxCalc.selfEmploymentTax.toLocaleString()}</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-slate-900/30 rounded-lg">
                <span className="text-slate-300">Federal Income Tax</span>
                <span className="text-white font-bold">${taxCalc.federalIncomeTax.toLocaleString()}</span>
              </div>
              <div className="flex justify-between items-center p-3 bg-slate-900/30 rounded-lg">
                <span className="text-slate-300">State Tax (estimate)</span>
                <span className="text-white font-bold">${taxCalc.stateTax.toLocaleString()}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Quarterly Payment Schedule */}
      <Card className="bg-slate-900/50 border-white/10">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Calendar className="w-5 h-5 text-blue-400" />
            Quarterly Payment Schedule
          </CardTitle>
          <CardDescription className="text-slate-400">
            Make these payments to avoid penalties
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {quarterPayments.map((quarter) => {
              const statusColors = {
                due: 'border-red-500/30 bg-red-500/10',
                upcoming: 'border-blue-500/30 bg-blue-500/10',
                future: 'border-slate-500/30 bg-slate-900/30',
              };

              const statusIcons = {
                due: <AlertCircle className="w-5 h-5 text-red-400" />,
                upcoming: <Calendar className="w-5 h-5 text-blue-400" />,
                future: <CheckCircle2 className="w-5 h-5 text-slate-500" />,
              };

              return (
                <div
                  key={quarter.quarter}
                  className={`p-4 rounded-lg border ${statusColors[quarter.status]}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {statusIcons[quarter.status]}
                      <div>
                        <div className="text-white font-semibold">
                          Q{quarter.quarter} {new Date().getFullYear()}
                        </div>
                        <div className="text-xs text-slate-400">
                          Due: {quarter.deadline.toLocaleDateString('en-US', {
                            month: 'long',
                            day: 'numeric',
                            year: 'numeric',
                          })}
                        </div>
                      </div>
                    </div>

                    <div className="text-right">
                      <div className="text-xl font-bold text-white">
                        ${quarter.amount.toLocaleString()}
                      </div>
                      <div className="text-xs text-slate-400 capitalize">{quarter.status}</div>
                    </div>
                  </div>

                  {quarter.status === 'upcoming' && (
                    <div className="mt-3 pt-3 border-t border-white/10">
                      <p className="text-xs text-blue-300">
                        📅 Payment due in {Math.ceil((quarter.deadline.getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days
                      </p>
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          <div className="mt-6 p-4 bg-blue-500/10 border border-blue-500/30 rounded-lg">
            <p className="text-sm text-blue-300 mb-2 font-semibold">💡 Payment Instructions</p>
            <ul className="text-xs text-slate-300 space-y-1">
              <li>• Pay online at <a href="https://www.irs.gov/payments" target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">IRS.gov/payments</a></li>
              <li>• Use IRS Form 1040-ES for voucher payments</li>
              <li>• Save confirmation numbers for your records</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      {/* Annual Projection */}
      <Card className="bg-gradient-to-br from-purple-500/10 to-pink-500/10 border-purple-500/20">
        <CardHeader>
          <CardTitle className="text-white">Annual Tax Projection</CardTitle>
          <CardDescription className="text-slate-400">
            Based on Q{currentQuarter} performance
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-4">
            <div className="p-4 bg-slate-900/30 rounded-lg">
              <div className="text-xs text-slate-400 mb-1">Projected Annual Income</div>
              <div className="text-2xl font-bold text-white">
                ${annualProjection.projectedAnnualIncome.toLocaleString()}
              </div>
            </div>
            <div className="p-4 bg-slate-900/30 rounded-lg">
              <div className="text-xs text-slate-400 mb-1">Projected Annual Tax</div>
              <div className="text-2xl font-bold text-white">
                ${annualProjection.projectedAnnualTax.toLocaleString()}
              </div>
            </div>
          </div>

          <div className="mt-4 text-xs text-slate-400">
            * Projection assumes your Q{currentQuarter} earnings rate continues for the rest of the year
          </div>
        </CardContent>
      </Card>

      {/* Download Button */}
      <Card className="bg-slate-900/50 border-white/10">
        <CardContent className="p-6">
          <Button
            onClick={handleDownloadReport}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:opacity-90"
          >
            <Download className="w-4 h-4 mr-2" />
            Download Tax Report
          </Button>
          <p className="text-xs text-slate-400 text-center mt-3">
            Download a detailed tax estimate report for your records
          </p>
        </CardContent>
      </Card>

      {/* Disclaimer */}
      <Card className="bg-yellow-500/10 border-yellow-500/30">
        <CardContent className="p-4">
          <p className="text-xs text-yellow-300 flex items-start gap-2">
            <AlertCircle className="w-4 h-4 flex-shrink-0 mt-0.5" />
            <span>
              <strong>Disclaimer:</strong> This calculator provides estimates only and should not be considered professional tax advice. Consult with a qualified tax professional for accurate tax planning. Actual tax liability may vary based on deductions, credits, and other factors.
            </span>
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
