// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  phone        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  earnings     Earning[]
  benefits     UserBenefit[]
  contributions Contribution[]
}

model GigPlatform {
  id       String    @id @default(cuid())
  name     String    @unique
  apiKey   String?
  logoUrl  String?

  // Relations
  earnings Earning[]
}

model Earning {
  id         String      @id @default(cuid())
  userId     String
  platformId String
  amount     Float
  date       DateTime
  description String?
  createdAt  DateTime    @default(now())

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  platform   GigPlatform @relation(fields: [platformId], references: [id])
}

model BenefitType {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  category    String        // health, retirement, emergency, tax

  // Relations
  benefits    Benefit[]
}

model Benefit {
  id            String        @id @default(cuid())
  typeId        String
  name          String
  description   String
  provider      String
  monthlyCost   Float
  coverageDetails String?

  // Relations
  type          BenefitType   @relation(fields: [typeId], references: [id])
  userBenefits  UserBenefit[]
}

model UserBenefit {
  id         String    @id @default(cuid())
  userId     String
  benefitId  String
  enrolledAt DateTime  @default(now())
  status     String    // active, pending, cancelled

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  benefit    Benefit   @relation(fields: [benefitId], references: [id])
}

model Contribution {
  id        String   @id @default(cuid())
  userId    String
  amount    Float
  type      String   // emergency_fund, retirement, health
  date      DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}
